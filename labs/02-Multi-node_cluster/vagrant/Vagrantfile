BOX_IMAGE = "generic/ubuntu1604"
SETUP_MASTER = true
SETUP_NODES = true
NODE_COUNT = 2
MASTER_IP = "192.168.26.10"
NODE_IP_NW = "192.168.26."
#NODE_IP_NW = "192.168.122."
POD_NW_CIDR = "10.244.0.0/16"

#Generate new using steps in README
KUBETOKEN = "b029ee.968a33e8d8e6bb0d"

$kubeminionscript = <<MINIONSCRIPT
sudo swapoff -a
kubeadm reset -f
kubeadm join --discovery-token-unsafe-skip-ca-verification --token #{KUBETOKEN} #{MASTER_IP}:6443

sudo apt-get install -y nfs-common 
sudo echo "192.168.26.10:/   /mnt   nfs4    _netdev,auto  0  0" >> /etc/fstab
sudo mount -a

MINIONSCRIPT

$kubemasterscript = <<SCRIPT
sudo swapoff -a
kubeadm reset -f
kubeadm init --kubernetes-version v1.15.3 --apiserver-advertise-address=#{MASTER_IP} --pod-network-cidr=#{POD_NW_CIDR} --token #{KUBETOKEN} --token-ttl 0
mkdir -p $HOME/.kube
sudo cp -Rf /etc/kubernetes/admin.conf $HOME/.kube/config

sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Flannel installation
sudo sysctl net.bridge.bridge-nf-call-iptables=1
kubectl apply -f /vagrant/kube-flannel.yml

# Share NFS
sudo mkdir -p /storage/dynamic
sudo chmod -R 755 /storage
sudo apt-get install -y nfs-kernel-server 
sudo mkdir /shared
sudo chmod 755 /shared
sudo echo "/shared 192.168.26.0/24(rw,no_root_squash)" >> /etc/exports
sudo systemctl unmask idmapd
sudo exportfs -a
sudo service nfs-kernel-server restart
sudo service idmapd restart 

# Dashboard installation
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml
kubectl create clusterrolebinding dashboard-admin-sa --clusterrole=cluster-admin --serviceaccount=default:dashboard-admin-sa
kubectl create serviceaccount dashboard-admin-sa
kubectl config set-credentials kubernetes-admin --token="$(kubectl -n default describe secret dashboard-admin-sa | awk '$1=="token:"{print $2}')"

cp $HOME/.kube/config /vagrant/kubeconfig.yaml

SCRIPT

Vagrant.configure("2") do |config|
  config.vm.box = BOX_IMAGE
  config.vm.box_check_update = false

  config.vm.provider "virtualbox" do |l|
    l.cpus = 1
    l.memory = "1024"
  end

  config.vm.provision :shell, :path => "scripts/enable_swap_limit_support.sh"
  config.vm.provision :reload
  config.vm.provision :shell, :path => "scripts/provision_software.sh"

  config.hostmanager.enabled = true
  config.hostmanager.manage_guest = true
  # config.vm.network "public_network"

  if SETUP_MASTER
    config.vm.define "master" do |subconfig|
      subconfig.vm.hostname = "master"
      subconfig.vm.network :private_network, ip: MASTER_IP
      subconfig.vm.provider :virtualbox do |vb|
        vb.customize ["modifyvm", :id, "--cpus", "2"]
        vb.customize ["modifyvm", :id, "--memory", "2048"]
        vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
        vb.name = "master"
      end
      subconfig.vm.synced_folder ".", "/vagrant", disabled: false
      subconfig.vm.provision :shell, inline: $kubemasterscript
      subconfig.vm.provision :shell, :path => "scripts/install_on_cluster.sh"
      subconfig.vm.synced_folder "../../..", "/usr/src/git_repo"
    end
  end
  
  if SETUP_NODES
    (1..NODE_COUNT).each do |i|
      config.vm.define "node#{i}" do |subconfig|
        subconfig.vm.hostname = "node#{i}"
        subconfig.vm.synced_folder ".", "/vagrant", disabled: false
        subconfig.vm.network :private_network, ip: NODE_IP_NW + "#{i + 10}"
        subconfig.vm.provision :shell, inline: $kubeminionscript
        subconfig.vm.provider :virtualbox do |vb|
          vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
          vb.name = "node#{i}"
        end
      end
    end
  end
end